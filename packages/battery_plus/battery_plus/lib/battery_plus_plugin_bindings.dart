// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

// Auto-generated initialization code.

final ffi.Pointer<T> Function<T extends ffi.NativeType>(String sym) jniLookup =
    ProtectedJniExtensions.initGeneratedLibrary("battery_plus_plugin_bindings");

/// from: BatteryPlusPlugin
class BatteryPlusPlugin extends jni.JObject {
  @override
  late final jni.JObjType<BatteryPlusPlugin> $type = type;

  BatteryPlusPlugin.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $BatteryPlusPluginType();
  static final _get_Companion =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_BatteryPlusPlugin__Companion")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final BatteryPlusPlugin$Companion Companion
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject get Companion =>
      const jni.JObjectType().fromRef(_get_Companion().object);

  static final _getApplicationContext = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "BatteryPlusPlugin__getApplicationContext")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final android.app.Activity getApplicationContext()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getApplicationContext() {
    return const jni.JObjectType()
        .fromRef(_getApplicationContext(reference).object);
  }

  static final _setApplicationContext = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "BatteryPlusPlugin__setApplicationContext")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final void setApplicationContext(android.app.Activity activity)
  void setApplicationContext(
    jni.JObject activity,
  ) {
    return _setApplicationContext(reference, activity.reference).check();
  }

  static final _ctor = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "BatteryPlusPlugin__ctor")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.app.Activity activity)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory BatteryPlusPlugin(
    jni.JObject activity,
  ) {
    return BatteryPlusPlugin.fromRef(_ctor(activity.reference).object);
  }

  static final _getBatteryLevel = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "BatteryPlusPlugin__getBatteryLevel")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.String getBatteryLevel()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getBatteryLevel() {
    return const jni.JStringType().fromRef(_getBatteryLevel(reference).object);
  }

  static final _getBatteryStatus = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "BatteryPlusPlugin__getBatteryStatus")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.String getBatteryStatus()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getBatteryStatus() {
    return const jni.JStringType().fromRef(_getBatteryStatus(reference).object);
  }

  static final _isInPowerSaveMode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "BatteryPlusPlugin__isInPowerSaveMode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.Boolean isInPowerSaveMode()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JBoolean isInPowerSaveMode() {
    return const jni.JBooleanType()
        .fromRef(_isInPowerSaveMode(reference).object);
  }
}

class $BatteryPlusPluginType extends jni.JObjType<BatteryPlusPlugin> {
  const $BatteryPlusPluginType();

  @override
  String get signature => r"LBatteryPlusPlugin;";

  @override
  BatteryPlusPlugin fromRef(jni.JObjectPtr ref) =>
      BatteryPlusPlugin.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BatteryPlusPluginType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BatteryPlusPluginType) &&
        other is $BatteryPlusPluginType;
  }
}
